@App:name('EIStatApp')
@App:description('Execution plan for EI Analytics')

-- Streams
define stream decompressedEventStream (meta_tenantId int, messageFlowId string, host string, hashCode string, componentName string, componentType string, componentIndex int, componentId string, startTime long, endTime long, duration long, beforePayload string, afterPayload string, contextPropertyMap string, transportPropertyMap string, children string, entryPoint string, entryPointHashcode string, faultCount int, _timestamp long);

define stream ESBStatStreamTemp (componentId string, componentName string, componentType string, duration long, faultCount int, startTime long, entryPoint string, meta_tenantId int);

@source(type = 'wso2event', wso2.stream.id = 'org.wso2.esb.analytics.stream.ConfigEntry:1.0.0', @map(type = 'wso2event'))
define stream configEntryEvent (meta_tenantId int, hashcode string, entryName string, configData string);

define stream MediatorStatStreamTemp (meta_tenantId int, entryPoint string, entryPointHashcode string, componentId string, hashCode string, componentName string, componentType string, duration long, faultCount int, startTime long);

@source(type = 'wso2event', wso2.stream.id = 'org.wso2.esb.analytics.stream.FlowEntry:1.0.0', @map(type = 'wso2event'))
define stream compressedEventStream (meta_compressed bool, meta_tenantId int, messageId string, flowData string);

-- Tables
@store(type = 'rdbms', datasource = 'EI_ANALYTICS')
define table ConfigEntry (meta_tenantId int, hashcode string, entryName string, configData string);

@store(type = 'rdbms', datasource = 'EI_ANALYTICS')
define table esbEventStream (meta_tenantId int, messageFlowId string, host string, hashCode string, componentName string, componentType string, componentIndex int, componentId string, startTime long, endTime long, duration long, beforePayload string, afterPayload string, contextPropertyMap string, transportPropertyMap string, children string, entryPoint string, entryPointHashcode string, faultCount int, _timestamp long);

-- Aggregations
@store(type = 'rdbms', datasource = 'EI_ANALYTICS')
@info(name = 'ESBStat')
define aggregation ESBStat 
from ESBStatStreamTemp 
select componentId, componentName, componentType, sum(duration) as totalDuration, min(duration) as minDuration, max(duration) as maxDuration, count() as noOfInvocation, sum(faultCount) as faultCount, entryPoint, meta_tenantId, startTime as _timestamp 
	group by meta_tenantId, componentId, componentName, componentType, entryPoint 
	aggregate by startTime every seconds...years;

@store(type = 'rdbms', datasource = 'EI_ANALYTICS')
@info(name = 'MediatorStat')
define aggregation MediatorStat 
from MediatorStatStreamTemp 
select meta_tenantId, entryPoint, entryPointHashcode, componentId, hashCode, componentName, componentType, sum(duration) as totalDuration, min(duration) as minDuration, max(duration) as maxDuration, count() as noOfInvocation, sum(faultCount) as faultCount, 
startTime
	group by meta_tenantId, componentId, componentName, componentType, entryPoint, entryPointHashcode, hashCode 
	aggregate by startTime every sec ... years;

-- -- Queries
from compressedEventStream#esbAnalytics:decompress(meta_compressed, meta_tenantId, messageId, flowData) 
select metaTenantId as meta_tenantId, messageFlowId, host, hashCode, componentName, componentType, componentIndex, componentId, startTime, endTime, duration, beforePayload, afterPayload, contextPropertyMap, transportPropertyMap, children, entryPoint, entryPointHashcode, faultCount, _timestamp 
insert current events into decompressedEventStream;

from configEntryEvent 
select * 
insert current events into configEntry;

from decompressedEventStream[not(beforePayload is null) or not(transportPropertyMap is null) or not(contextPropertyMap is null)] 
select * 
insert current events into esbEventStream;

from decompressedEventStream[componentType == 'Proxy Service' OR componentType == 'API' OR componentType == 'Inbound EndPoint'] 
select componentId, componentName, componentType, duration, ifThenElse(faultCount > 0, 1, 0) as faultCount, startTime, entryPoint, meta_tenantId 
insert current events into ESBStatStreamTemp;

from decompressedEventStream 
select meta_tenantId, entryPoint, entryPointHashcode, componentId, hashCode, componentName, componentType, duration, ifThenElse(faultCount > 0, 1, 0) as faultCount, startTime 
insert current events into MediatorStatStreamTemp;
